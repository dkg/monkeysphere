# -*-shell-script-*-
# This should be sourced by bash (though we welcome changes to make it POSIX sh compliant)

# Monkeysphere host add-revoker subcommand
#
# The monkeysphere scripts are written by:
# Jameson Rollins <jrollins@finestructure.net>
# Jamie McClelland <jm@mayfirst.org>
# Daniel Kahn Gillmor <dkg@fifthhorseman.net>
#
# They are Copyright 2008, and are all released under the GPL, version 3
# or later.

# add a revoker to the host key

add_revoker() {

local keyID
local tmpDir
local fingerprint
local addrevokerCommand

keyID="$1"

# check that key ID or file is specified
if [ -z "$keyID" ] ; then
    failure "You must specify the key ID of a revoker key, or specify a file to read the key from."
fi

# make a temporary directory for storing keys during import, and set
# the trap to delete it on exit
tmpDir=$(msmktempdir)
trap "rm -rf $tmpDir" EXIT

# if file is specified
if [ -f "$keyID" -o "$keyID" = '-' ] ; then
    # load the key from stdin
    if [ "$keyID" = '-' ] ; then
	# make a temporary file to hold the key from stdin
	keyID="$tmpDir"/importkey
	log verbose "reading key from stdin..."
	cat > "$keyID"

    # load the key from the file
    elif [ -f "$keyID" ] ; then
	log verbose "reading key from file '$keyID'..."
    fi

    # check the key is ok as monkeysphere user before loading
    log debug "checking keys in file..."
    fingerprint=$(su_monkeysphere_user \
	". ${SYSSHAREDIR}/common; list_primary_fingerprints" < "$keyID")

    if [ $(printf "%s" "$fingerprint" | egrep -c '^[A-F0-9]{40}$') -ne 1 ] ; then
	failure "There was not exactly one gpg key in the file."
    fi

    # load the key
    gpg_host --import <"$keyID" \
	|| failure "could not read key from '$keyID'"

# else, get the key from the keyserver
else
    # fix permissions and ownership on temporary directory which will
    # be used by monkeysphere user for storing the downloaded key
    chmod 0700 "$tmpDir"
    chown "$MONKEYSPHERE_USER":"$MONKEYSPHERE_USER" "$tmpDir"

    # download the key from the keyserver as the monkeysphere user
    log verbose "searching keyserver $KEYSERVER for keyID $keyID..."
    su_monkeysphere_user "GNUPGHOME=$tmpDir gpg --quiet --keyserver $KEYSERVER --recv-key 0x${keyID}!" \
	|| failure "Could not receive a key with this ID from the '$KEYSERVER' keyserver."

    # get the full fingerprint of new revoker key
    log debug "getting fingerprint of revoker key..."
    fingerprint=$(su_monkeysphere_user "GNUPGHOME=$tmpDir gpg --list-key --with-colons --with-fingerprint 0x${keyID}!" \
	| grep '^fpr:' | grep "$keyID" | cut -d: -f10)

    log info "key found:"
    su_monkeysphere_user "GNUPGHOME=$tmpDir gpg --fingerprint 0x${fingerprint}!"

    if [ "$PROMPT" = "true" ] ; then
	echo "Are you sure you want to add the above key as a"
	read -p "revoker of the host key? (Y/n) " OK; OK=${OK:-Y}
	if [ "${OK/y/Y}" != 'Y' ] ; then
	    failure "revoker not added."
	fi
    else
	log debug "adding revoker without prompting."
    fi

    # export the new key to the host keyring
    log debug "loading key into host keyring..."
    su_monkeysphere_user "GNUPGHOME=$tmpDir gpg --quiet --export 0x${fingerprint}!" \
	| gpg_host --import
fi

# edit-key script to add revoker
addrevokerCommand=$(cat <<EOF
addrevoker
$fingerprint
y
save

EOF
    )

# core ltsigns the newly imported revoker key
log debug "executing add revoker script..."
if echo "$addrevokerCommand" | gpg_host_edit ; then

    update_gpg_pub_file

    log info "Revoker added."
else
    failure "Problem adding revoker."
fi

# remove the temporary directory
trap - EXIT
rm -rf "$tmpDir"

}
