#!/usr/bin/env bash

# Tests to ensure that the monkeysphere is working

# Authors: 
#   Daniel Kahn Gillmor <dkg@fifthhorseman.net>
#   Jameson Rollins <jrollins@fifthhorseman.net>
#   Micah Anderson <micah@riseup.net> 
#
# Copyright: 2008-2009
# License: GPL v3 or later

# these tests should all be able to run as a non-privileged user.

# all subcommands in this script should complete without failure:
set -e
# piped commands should return the code of the first non-zero return
set -o pipefail

# make sure the TESTDIR is an absolute path, not a relative one.
export TESTDIR=$(cd $(dirname "$0") && pwd)

source "$TESTDIR"/common

## make sure that the right tools are installed to run the test.  the
## test has *more* requirements than plain ol' monkeysphere:
which socat >/dev/null || { echo "You must have socat installed to run this test." ; exit 1; }


## FIXME: other checks?

######################################################################
### FUNCTIONS

# gpg command for test admin user
gpgadmin() {
    chmod 0700 "$TEMPDIR"/admin
    GNUPGHOME="$TEMPDIR"/admin/.gnupg gpg "$@"
}

# test ssh connection
# first argument is expected return code from ssh connection
ssh_test() {
    umask 0077

    CODE=${1:-0}

    # start the ssh daemon on the socket
    echo "##### starting ssh server..."
    socat EXEC:"/usr/sbin/sshd -f ${SSHD_CONFIG} -i -D -e" "UNIX-LISTEN:${SOCKET}" 2> "$TEMPDIR"/sshd.log &
    SSHD_PID="$!"

    # wait until the socket is created before continuing
    while [ ! -S "$SOCKET" ] ; do
	sleep 1
    done

    set +e

    # make a client connection to the socket
    echo "##### starting ssh client..."
    ssh-agent bash -c \
	"monkeysphere subkey-to-ssh-agent && ssh -F $TEMPDIR/testuser/.ssh/config testhost true"
    RETURN="$?"

    # kill the sshd process if it's still running
    kill "$SSHD_PID"
    SSHD_PID=

    set -e

    echo "##### return $RETURN"
    if [ "$RETURN" = "$CODE" ] ; then
	echo "##### ssh connection test returned as desired"
	return 0
    else
	echo "##### ssh connection test failed.  expected return code $CODE"
	return 1
    fi
}

SSHD_PID=

## setup trap
trap failed_cleanup EXIT


######################################################################
### SETUP VARIABLES

## set up some variables to ensure that we're operating strictly in
## the tests, not system-wide:

# set up temp dir

# NOTE: /tmp can not be used as the temp dir here, since the
# permissions on /tmp are usually such that they will not pass the
# monkeysphere/ssh path permission checking.  If you need to use a
# different location than the current source, please set $TMPDIR
# somewhere with tighter permissions.

mkdir -p "$TESTDIR"/tmp
TEMPDIR=$(mktemp -d "${TMPDIR:-$TESTDIR/tmp}/monkeyspheretest.XXXXXXX")

# Use the local copy of executables first, instead of system ones.
# This should help us test without installing.
export PATH="$TESTDIR"/../src:"$TESTDIR"/../src/keytrans:"$PATH"

export MONKEYSPHERE_SYSDATADIR="$TEMPDIR"
export MONKEYSPHERE_SYSCONFIGDIR="$TEMPDIR"
export MONKEYSPHERE_SYSSHAREDIR="$TESTDIR"/../src/share
export MONKEYSPHERE_MONKEYSPHERE_USER=$(whoami)
export MONKEYSPHERE_CHECK_KEYSERVER=false
export MONKEYSPHERE_LOG_LEVEL=DEBUG
export MONKEYSPHERE_CORE_KEYLENGTH=1024
export MONKEYSPHERE_PROMPT=false

export SSHD_CONFIG="$TEMPDIR"/sshd_config
export SOCKET="$TEMPDIR"/ssh-socket

# Make sure $DISPLAY is set to convince ssh and monkeysphere to fall
# back on $SSH_ASKPASS.  Make sure it's not set to the current actual
# $DISPLAY (if one exists) because this test suite should not be doing
# *anything* with any running X11 session.
export DISPLAY=monkeys

## make sure that the version number matches the debian changelog
## (don't bother if this is being run from the tests).

if [ -f "$TESTDIR"/../packaging/debian/changelog ]; then
    echo "##################################################"
    echo "### checking version string match..."
    repver=$(monkeysphere version)
    debver=$(head -n1 "$TESTDIR"/../packaging/debian/changelog | sed 's/.*(\([^-]*\)-.*/\1/')
    if [ "$repver" = "$debver" ] ; then
	echo "Versions match!"
    else
	printf "reported version string (%s) does not match debian changelog (%s)\n" "$repver" "$debver"
	exit 1
    fi
fi

######################################################################
### CONFIGURE ENVIRONMENTS

# copy in admin and testuser home to tmp
echo "##################################################"
echo "### configuring testuser home..."
cp -a "$TESTDIR"/home/testuser "$TEMPDIR"/
# set up environment for testuser
export TESTHOME="$TEMPDIR"/testuser
export GNUPGHOME="$TESTHOME"/.gnupg
chmod 0700 "$GNUPGHOME"
export SSH_ASKPASS="$TESTHOME"/.ssh/askpass
export MONKEYSPHERE_HOME="$TESTHOME"/.monkeysphere
cat <<EOF >> "$TESTHOME"/.ssh/config
UserKnownHostsFile $TESTHOME/.ssh/known_hosts
IdentityFile $TESTHOME/.ssh/no-such-identity
ProxyCommand $TESTHOME/.ssh/proxy-command %h %p $SOCKET
EOF
cat <<EOF >> "$MONKEYSPHERE_HOME"/monkeysphere.conf
KNOWN_HOSTS=$TESTHOME/.ssh/known_hosts
EOF
get_gpg_prng_arg >> "$GNUPGHOME"/gpg.conf

echo "##################################################"
echo "### configuring admin home..."
cp -a "$TESTDIR"/home/admin "$TEMPDIR"/

# set up sshd
echo "##################################################"
echo "### configuring sshd..."
cp "$TESTDIR"/etc/ssh/sshd_config "$SSHD_CONFIG"
# write the sshd_config
cat <<EOF >> "$SSHD_CONFIG"
HostKey ${MONKEYSPHERE_SYSDATADIR}/ssh_host_rsa_key
AuthorizedKeysFile ${MONKEYSPHERE_SYSDATADIR}/authorized_keys/%u
EOF


######################################################################
### SERVER HOST SETUP

# import host key
echo "##################################################"
echo "### import host key..."
ssh-keygen -b 1024 -t rsa -N '' -f "$TEMPDIR"/ssh_host_rsa_key
monkeysphere-host import-key "$TEMPDIR"/ssh_host_rsa_key testhost

echo "##################################################"
echo "### getting host key fingerprint..."
HOSTKEYID=$( monkeysphere-host show-key | grep '^OpenPGP fingerprint: ' | cut -f3 -d\  )
echo "$HOSTKEYID"

# change host key expiration
echo "##################################################"
echo "### setting host key expiration..."
monkeysphere-host set-expire 1
# FIXME: how do we check that the expiration has really been set?

# certify host key with the "Admin's Key".
# (this would normally be done via keyservers)
echo "##################################################"
echo "### certifying server host key..."
GNUPGHOME="$MONKEYSPHERE_SYSCONFIGDIR"/host gpg --armor --export "$HOSTKEYID" | gpgadmin --import
echo y | gpgadmin --command-fd 0 --sign-key "$HOSTKEYID"

# FIXME: add revoker?

# FIXME: how can we test publish-key without flooding junk into the
# keyservers?

# FIXME: should we run "diagnostics" here to test setup?


######################################################################
### SERVER AUTHENTICATION SETUP

# set up monkeysphere authentication
echo "##################################################"
echo "### setup monkeysphere authentication..."
cp "$TESTDIR"/etc/monkeysphere/monkeysphere-authentication.conf "$TEMPDIR"/
cat <<EOF >> "$TEMPDIR"/monkeysphere-authentication.conf
AUTHORIZED_USER_IDS="$MONKEYSPHERE_HOME/authorized_user_ids"
EOF
monkeysphere-authentication setup
get_gpg_prng_arg >> "$MONKEYSPHERE_SYSDATADIR"/authentication/sphere/gpg.conf

# add admin as identity certifier for testhost
echo "##################################################"
echo "### adding admin as certifier..."
monkeysphere-authentication add-id-certifier "$TEMPDIR"/admin/.gnupg/pubkey.gpg

echo "##################################################"
echo "### list certifiers..."
monkeysphere-authentication list-certifiers

# FIXME: should we run "diagnostics" here to test setup?

######################################################################
### TESTUSER SETUP

# generate an auth subkey for the test user that expires in 2 days
echo "##################################################"
echo "### generating key for testuser..."
monkeysphere gen-subkey

# add server key to testuser keychain
echo "##################################################"
echo "### export server key to testuser..."
gpgadmin --armor --export "$HOSTKEYID" | gpg --import

# teach the "server" about the testuser's key
echo "##################################################"
echo "### export testuser key to server..."
gpg --export testuser | monkeysphere-authentication gpg-cmd --import

# update authorized_keys for user
echo "##################################################"
echo "### update server authorized_keys file for this testuser..."
monkeysphere-authentication update-users $(whoami)
# FIXME: this is maybe not failing properly for:
# ms: improper group or other writability on path '/tmp'.


######################################################################
### TESTS

# connect to test sshd, using monkeysphere ssh-proxycommand to verify
# the identity before connection.  This should work in both directions!
echo "##################################################"
echo "### ssh connection test for success..."
ssh_test

# remove the testuser's authorized_user_ids file, update, and make
# sure that the ssh authentication FAILS
echo "##################################################"
echo "### removing testuser authorized_user_ids and updating..."
mv "$TESTHOME"/.monkeysphere/authorized_user_ids{,.bak}
monkeysphere-authentication update-users $(whoami)
echo "##################################################"
echo "### ssh connection test for server authentication denial..."
ssh_test 255
mv "$TESTHOME"/.monkeysphere/authorized_user_ids{.bak,}

# put improper permissions on authorized_user_ids file, update, and
# make sure ssh authentication FAILS
echo "##################################################"
echo "### setting group writability on authorized_user_ids and updating..."
chmod g+w "$TESTHOME"/.monkeysphere/authorized_user_ids
monkeysphere-authentication update-users $(whoami)
echo "##################################################"
echo "### ssh connection test for server authentication denial..."
ssh_test 255
chmod g-w "$TESTHOME"/.monkeysphere/authorized_user_ids
echo "##################################################"
echo "### setting other writability on authorized_user_ids and updating..."
chmod o+w "$TESTHOME"/.monkeysphere/authorized_user_ids
monkeysphere-authentication update-users $(whoami)
echo "##################################################"
echo "### ssh connection test for server authentication denial..."
ssh_test 255
chmod o-w "$TESTHOME"/.monkeysphere/authorized_user_ids

# FIXME: addtest: remove admin as id-certifier and check ssh failure

# FIXME: addtest: add hostname on host key
# FIXME: addtest: revoke hostname on host key and check ssh failure

# FIXME: addtest: revoke the host key and check ssh failure


######################################################################

trap - EXIT

echo "##################################################"
echo " Monkeysphere basic tests completed successfully!"
echo "##################################################"

cleanup
