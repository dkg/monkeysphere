#!/usr/bin/env bash

# Tests to ensure that the monkeysphere is working

# Authors: 
#   Daniel Kahn Gillmor <dkg@fifthhorseman.net>
#   Jameson Rollins <jrollins@fifthhorseman.net>
# Copyright: 2008
# License: GPL v3 or later

# these tests should all be able to
# as a non-privileged user.

# all subcommands in this script should complete without failure:
set -e

# gpg command for test admin user
gpgadmin() {
    GNUPGHOME="$TEMPDIR"/admin/.gnupg gpg "$@"
}

failed_cleanup() {
# FIXME: can we be more verbose here?
  echo 'FAILED!'
  cleanup
}

# cleanup:
cleanup() {

    echo
    read -p "press enter to cleanup and remove tmp:"

    if ( ps $SSHD_PID >/dev/null ) ; then 
	echo "### stopping still-running sshd..."
	kill $SSHD_PID
    fi

    echo "### removing temp dir..."
    rm -rf "$TEMPDIR"

    wait
}

## setup trap
trap failed_cleanup EXIT

## set up some variables to ensure that we're operating strictly in
## the tests, not system-wide:

export TESTDIR=$(pwd)

# make temp dir
TEMPDIR="$TESTDIR"/tmp
if [ -e "$TEMPDIR" ] ; then
    echo "tempdir '$TEMPDIR' already exists."
    exit 1
fi
mkdir "$TEMPDIR"

# Use the local copy of executables first, instead of system ones.
# This should help us test without installing.
export PATH="$TESTDIR"/../src:"$TESTDIR"/../src/keytrans:"$PATH"

export MONKEYSPHERE_SYSDATADIR="$TEMPDIR"
export MONKEYSPHERE_SYSCONFIGDIR="$TEMPDIR"
export MONKEYSPHERE_SYSSHAREDIR="$TESTDIR"/../src
export MONKEYSPHERE_MONKEYSPHERE_USER="$USER"
export MONKEYSPHERE_CHECK_KEYSERVER=false

SSHD_CONFIG="$TEMPDIR"/sshd_config
export SOCKET="$TEMPDIR"/ssh-socket

# copy in admin and testuser home to tmp
echo "### copying admin and testuser homes..."
cp -a "$TESTDIR"/home/admin "$TEMPDIR"/
cp -a "$TESTDIR"/home/testuser "$TEMPDIR"/

cat <<EOF >> "$TEMPDIR"/testuser/.ssh/config
UserKnownHostsFile $TEMPDIR/testuser/.ssh/known_hosts
ProxyCommand $TEMPDIR/testuser/.ssh/proxy-command %h %p $SOCKET
EOF

cat <<EOF >> "$TEMPDIR"/testuser/.monkeysphere/monkeysphere.conf
KNOWN_HOSTS=$TEMPDIR/testuser/.ssh/known_hosts
EOF

### SERVER TESTS

# setup monkeysphere temp gnupghome directories
mkdir -p -m 750 "$MONKEYSPHERE_SYSDATADIR"/gnupg-host
mkdir -p -m 700 "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication
cat <<EOF > "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication/gpg.conf
primary-keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-authentication/pubring.gpg
keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-host/pubring.gpg
EOF

# create a new host key
echo "### generating server key..."
# add gpg.conf with quick-random
echo "quick-random" >> "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf
echo | monkeysphere-server gen-key --length 1024 --expire 0 testhost
# remove the gpg.conf
rm "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf

HOSTKEYID=$( monkeysphere-server show-key | tail -n1 | cut -f3 -d\  )

# certify it with the "Admin's Key".
# (this would normally be done via keyservers)
echo "### certifying server key..."
monkeysphere-server gpg-authentication-cmd "--armor --export $HOSTKEYID" | gpgadmin --import
echo y | gpgadmin --command-fd 0 --sign-key "$HOSTKEYID"

# FIXME: how can we test publish-key without flooding junk into the
# keyservers?

# add admin as identity certifier for testhost
echo "### adding admin as certifier..."
echo y | monkeysphere-server add-identity-certifier "$TEMPDIR"/admin/.gnupg/pubkey.gpg

# initialize base sshd_config
cp etc/ssh/sshd_config "$SSHD_CONFIG"
# write the sshd_config
cat <<EOF >> "$SSHD_CONFIG"
HostKey ${MONKEYSPHERE_SYSDATADIR}/ssh_host_rsa_key
AuthorizedKeysFile ${MONKEYSPHERE_SYSDATADIR}/authorized_keys/%u
EOF

# launch test sshd with the new host key.
echo "### starting sshd..."
socat EXEC:"/usr/sbin/sshd -f ${SSHD_CONFIG} -i -D -e" "UNIX-LISTEN:${SOCKET}" 2> "$TEMPDIR"/sshd.log &
export SSHD_PID=$!

### TESTUSER TESTS

# generate an auth subkey for the test user
echo "### generating key for testuser..."
export GNUPGHOME="$TEMPDIR"/testuser/.gnupg
export SSH_ASKPASS="$TEMPDIR"/testuser/.ssh/askpass
export MONKEYSPHERE_HOME="$TEMPDIR"/testuser/.monkeysphere

monkeysphere gen-subkey --expire 0

# add server key to testuser keychain
echo "### export server key to testuser..."
gpgadmin --armor --export "$HOSTKEYID" | gpg --import

# connect to test sshd, using monkeysphere-ssh-proxycommand to verify
# the identity before connection.  This should work in both directions!
echo "### testuser connecting to sshd socket..."

ssh-agent bash -c \
   'monkeysphere subkey-to-ssh-agent && ssh -F "$TEMPDIR"/testuser/.ssh/config testhost'

trap - EXIT
cleanup
