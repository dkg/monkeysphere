#!/usr/bin/env bash

# Tests to ensure that the monkeysphere is working

# Authors: 
#   Daniel Kahn Gillmor <dkg@fifthhorseman.net>
#   Jameson Rollins <jrollins@fifthhorseman.net>
# Copyright: 2008
# License: GPL v3 or later

# these tests should all be able to
# as a non-privileged user.

# all subcommands in this script should complete without failure:
set -e

# gpg command for test admin user
gpgadmin() {
    GNUPGHOME="$TEMPDIR"/admin/.gnupg gpg "$@"
}

ssh_test() {
    umask 0077

    # start the ssh daemon on the socket
    echo "##### starting ssh server..."
    socat EXEC:"/usr/sbin/sshd -f ${SSHD_CONFIG} -i -D -e" "UNIX-LISTEN:${SOCKET}" 2> "$TEMPDIR"/sshd.log &
    SSHD_PID="$!"

    # wait until the socket is created before continuing
    while [ ! -S "$SOCKET" ] ; do
	sleep 1
    done

    # make a client connection to the socket
    echo "##### starting ssh client..."
    ssh-agent bash -c \
	"monkeysphere subkey-to-ssh-agent && ssh -F $TEMPDIR/testuser/.ssh/config testhost true"
    RETURN="$?"

    # kill the previous sshd process if it's still running
    kill "$SSHD_PID"

    return "$RETURN"
}

failed_cleanup() {
    # FIXME: can we be more verbose here?
    echo 'FAILED!'
    read -p "press enter to cleanup and remove tmp:"

    cleanup
}

get_gpg_prng_arg() {
    if (gpg --quick-random --version >/dev/null 2>&1) ; then
	echo quick-random
    elif (gpg --debug-quick-random --version >/dev/null 2>&1) ; then
	echo debug-quick-random
    fi
}

cleanup() {
    echo "### removing temp dir..."
    rm -rf "$TEMPDIR"

    wait
}

## setup trap
trap failed_cleanup EXIT


### SETUP VARIABLES
## set up some variables to ensure that we're operating strictly in
## the tests, not system-wide:

export TESTDIR=$(pwd)

# make temp dir
TEMPDIR="$TESTDIR"/tmp
if [ -e "$TEMPDIR" ] ; then
    echo "tempdir '$TEMPDIR' already exists."
    exit 1
fi
mkdir "$TEMPDIR"

# Use the local copy of executables first, instead of system ones.
# This should help us test without installing.
export PATH="$TESTDIR"/../src:"$TESTDIR"/../src/keytrans:"$PATH"

export MONKEYSPHERE_SYSDATADIR="$TEMPDIR"
export MONKEYSPHERE_SYSCONFIGDIR="$TEMPDIR"
export MONKEYSPHERE_SERVER_CONFIG="$TEMPDIR"/monkeysphere-server.conf
export MONKEYSPHERE_SYSSHAREDIR="$TESTDIR"/../src
export MONKEYSPHERE_MONKEYSPHERE_USER=$(whoami)
export MONKEYSPHERE_CHECK_KEYSERVER=false
export MONKEYSPHERE_LOG_LEVEL=DEBUG

export SSHD_CONFIG="$TEMPDIR"/sshd_config
export SOCKET="$TEMPDIR"/ssh-socket
export SSHD_PID=


### CONFIGURE ENVIRONMENTS

# copy in admin and testuser home to tmp
echo "### copying admin and testuser homes..."
cp -a "$TESTDIR"/home/admin "$TEMPDIR"/
cp -a "$TESTDIR"/home/testuser "$TEMPDIR"/

# set up environment for testuser
TESTHOME="$TEMPDIR"/testuser
export GNUPGHOME="$TESTHOME"/.gnupg
export SSH_ASKPASS="$TESTHOME"/.ssh/askpass
export MONKEYSPHERE_HOME="$TESTHOME"/.monkeysphere
cat <<EOF >> "$TESTHOME"/.ssh/config
UserKnownHostsFile $TESTHOME/.ssh/known_hosts
IdentityFile $TESTHOME/.ssh/no-such-identity
ProxyCommand $TESTHOME/.ssh/proxy-command %h %p $SOCKET
EOF
cat <<EOF >> "$MONKEYSPHERE_HOME"/monkeysphere.conf
KNOWN_HOSTS=$TESTHOME/.ssh/known_hosts
EOF
get_gpg_prng_arg >> "$GNUPGHOME"/gpg.conf

# set up sshd
echo "### configuring sshd..."
cp etc/ssh/sshd_config "$SSHD_CONFIG"
# write the sshd_config
cat <<EOF >> "$SSHD_CONFIG"
HostKey ${MONKEYSPHERE_SYSDATADIR}/ssh_host_rsa_key
AuthorizedKeysFile ${MONKEYSPHERE_SYSDATADIR}/authorized_keys/%u
EOF

# set up monkeysphere-server
echo "### configuring monkeysphere..."
mkdir -p -m 750 "$MONKEYSPHERE_SYSDATADIR"/gnupg-host
mkdir -p -m 700 "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication
mkdir -p -m 700 "$MONKEYSPHERE_SYSDATADIR"/authorized_keys
mkdir -p -m 700 "$MONKEYSPHERE_SYSDATADIR"/tmp
cp etc/monkeysphere/monkeysphere-server.conf "$MONKEYSPHERE_SERVER_CONFIG"
cat <<EOF >> "$MONKEYSPHERE_SERVER_CONFIG"
AUTHORIZED_USER_IDS="$MONKEYSPHERE_HOME/authorized_user_ids"
EOF
cat <<EOF > "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication/gpg.conf
primary-keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-authentication/pubring.gpg
keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-host/pubring.gpg
EOF


### SERVER TESTS

# create a new host key
echo "### generating server key..."
# add gpg.conf with quick-random
get_gpg_prng_arg >> "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf
echo | monkeysphere-server gen-key --length 1024 --expire 0 testhost
# remove the gpg.conf
rm "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf

HOSTKEYID=$( monkeysphere-server show-key | tail -n1 | cut -f3 -d\  )

# certify it with the "Admin's Key".
# (this would normally be done via keyservers)
echo "### certifying server key..."
monkeysphere-server gpg-authentication-cmd "--armor --export $HOSTKEYID" | gpgadmin --import
echo y | gpgadmin --command-fd 0 --sign-key "$HOSTKEYID"

# FIXME: how can we test publish-key without flooding junk into the
# keyservers?

# add admin as identity certifier for testhost
echo "### adding admin as certifier..."
echo y | monkeysphere-server add-identity-certifier "$TEMPDIR"/admin/.gnupg/pubkey.gpg


### TESTUSER TESTS

# generate an auth subkey for the test user that expires in 2 days
echo "### generating key for testuser..."
monkeysphere gen-subkey --expire 2

# add server key to testuser keychain
echo "### export server key to testuser..."
gpgadmin --armor --export "$HOSTKEYID" | gpg --import

# teach the "server" about the testuser's key
echo "### export testuser key to server..."
gpg --export testuser | monkeysphere-server gpg-authentication-cmd --import
echo "### update server authorized_keys file for this testuser..."
monkeysphere-server update-users $(whoami)

# connect to test sshd, using monkeysphere-ssh-proxycommand to verify
# the identity before connection.  This should work in both directions!
echo "### ssh connection test for success..."
ssh_test

# remove the testuser's authorized_user_ids file and update
# authorized_keys file, this is to make sure that the ssh
# authentication FAILS...
echo "### removing testuser authorized_user_ids and reupdating authorized_keys..."
rm -f "$TESTHOME"/.monkeysphere/authorized_user_ids
monkeysphere-server update-users $(whoami)

# make sure the user can NOT connect
echo "### ssh connection test for server authentication denial..."
ssh_test || ret="$?"
if [ "$ret" != '255' ] ; then
    echo "### connection should have failed!"
    exit "$ret"
fi

trap - EXIT

echo
echo "Monkeysphere basic tests completed successfully!"
echo

cleanup
