#!/usr/bin/env bash

# Tests to ensure that the monkeysphere is working

# Author: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
# Date: 2008-09-13 13:40:15-0400

# these tests might be best run under fakeroot, particularly the
# "server-side" tests.  Using fakeroot, they should be able to be run
# as a non-privileged user.

# NOTE: these tests have *not* themselves been tested yet
# (2008-09-13).  Please exercise with caution!

# fail on fail
set -e

# these tests assume a commonly-trusted "Admin's key", a fake key
# permanently stored in ./home/admin/.gnupg:
gpgadmin() {
    GNUPGHOME="$TESTDIR"/home/admin/.gnupg gpg "$@"
}

# cleanup:
cleanup() {

    read -p "press enter to cleanup and remove tmp:"

    # FIXME: stop the sshd process

    echo
    echo "### removing temp dir..."
    rm -rf "$TEMPDIR"

    # FIXME: how should we clear out the temporary $VARLIB?

    # FIXME: clear out ssh client config file and known hosts.
}

## setup trap
trap cleanup EXIT

## set up some variables to ensure that we're operating strictly in
## the tests, not system-wide:

export TESTDIR=$(pwd)

# make temp dir
TEMPDIR="$TESTDIR"/tmp
if [ -e "$TEMPDIR" ] ; then
    echo "tempdir '$TEMPDIR' already exists."
    exit 1
fi
mkdir "$TEMPDIR"

# Use the local copy of executables first, instead of system ones.
# This should help us test without installing.
export PATH="$TESTDIR"/../src:"$TESTDIR"/../src/keytrans:"$PATH"

export MONKEYSPHERE_SYSDATADIR="$TEMPDIR"
export MONKEYSPHERE_SYSCONFIGDIR="$TEMPDIR"
export MONKEYSPHERE_SYSSHAREDIR="$TESTDIR"/../src
export MONKEYSPHERE_MONKEYSPHERE_USER="$USER"
export MONKEYSPHERE_CHECK_KEYSERVER=false

SSHD_CONFIG="$TEMPDIR"/sshd_config
export SOCKET="$TEMPDIR"/ssh-socket


### SERVER TESTS

# setup monkeysphere temp gnupghome directories
mkdir -p -m 750 "$MONKEYSPHERE_SYSDATADIR"/gnupg-host
mkdir -p -m 700 "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication
cat <<EOF > "$MONKEYSPHERE_SYSDATADIR"/gnupg-authentication/gpg.conf
primary-keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-authentication/pubring.gpg
keyring ${MONKEYSPHERE_SYSDATADIR}/gnupg-host/pubring.gpg
EOF

# create a new host key
echo "### generating server key..."
# add gpg.conf with quick-random
echo "quick-random" >> "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf
echo | monkeysphere-server gen-key --length 1024 --expire 0 testhost
# remove the gpg.conf
rm "$MONKEYSPHERE_SYSCONFIGDIR"/gnupg-host/gpg.conf

HOSTKEYID=$( monkeysphere-server show-key | tail -n1 | cut -f3 -d\  )

# certify it with the "Admin's Key".
# (this would normally be done via keyservers)
echo "### certifying server key..."
monkeysphere-server gpg-authentication-cmd "--armor --export $HOSTKEYID" | gpgadmin --import
echo y | gpgadmin --command-fd 0 --sign-key "$HOSTKEYID"

# FIXME: how can we test publish-key without flooding junk into the
# keyservers?

# indicate that the "Admin's" key is an identity certifier for the
# host

echo "### adding admin as certifier..."
echo y | monkeysphere-server add-identity-certifier "$TESTDIR"/home/admin/.gnupg/pubkey.gpg

# initialize base sshd_config
cp etc/ssh/sshd_config "$SSHD_CONFIG"
# write the sshd_config
cat <<EOF >> "$SSHD_CONFIG"
HostKey ${MONKEYSPHERE_SYSDATADIR}/ssh_host_rsa_key
AuthorizedKeysFile ${MONKEYSPHERE_SYSDATADIR}/authorized_keys/%u
EOF

# launch test sshd with the new host key.
echo "### starting sshd..."
socat EXEC:"/usr/sbin/sshd -f ${SSHD_CONFIG} -i -d -d -d -D -e" "UNIX-LISTEN:${SOCKET}" 2> "$TEMPDIR"/sshd.log &


### TESTUSER TESTS

# copy testuser home directory into temp dir
echo "### seting up testuser home..."
cp -r "$TESTDIR"/home/testuser "$TEMPDIR"/

# generate an auth subkey for the test user
echo "### generating key for testuser..."
MONKEYSPHERE_GNUPGHOME="$TEMPDIR"/testuser/.gnupg \
    monkeysphere gen-subkey --expire 0

# add server key to testuser keychain
echo "### export server key to testuser..."
gpgadmin --armor --export "$HOSTKEYID" | \
    GNUPGHOME="$TEMPDIR"/testuser/.gnupg gpg --import

#GNUPGHOME="$TEMPDIR"/testuser/.gnupg gpg --list-keys
#read -p "?"

# connect to test sshd, using monkeysphere to verify the identity
# before connection.
echo "### testuser connecting to sshd socket..."
PROXY_COMMAND="monkeysphere-ssh-proxycommand --no-connect %h && socat STDIO UNIX:${SOCKET}"
GNUPGHOME="$TEMPDIR"/testuser/.gnupg ssh -oProxyCommand="$PROXY_COMMAND" testhost

# create a new client side key, certify it with the "CA", use it to
# log in.
## FIXME: implement!
