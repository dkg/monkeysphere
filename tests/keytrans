#!/usr/bin/env bash

# Tests to ensure that the monkeysphere is working

# Authors: 
#   Daniel Kahn Gillmor <dkg@fifthhorseman.net>
#   Jameson Rollins <jrollins@fifthhorseman.net>
#   Micah Anderson <micah@riseup.net> 
#
# Copyright: 2008-2009
# License: GPL v3 or later

# these tests should all be able to run as a non-privileged user.

# all subcommands in this script should complete without failure:
set -e
# piped commands should return the code of the first non-zero return
set -o pipefail

# make sure the TESTDIR is an absolute path, not a relative one.
export TESTDIR=$(cd $(dirname "$0") && pwd)

source "$TESTDIR"/common

perl -MCrypt::OpenSSL::RSA -e 1 2>/dev/null || { echo "You must have the perl module Crypt::OpenSSL::RSA installed to run this test.  
On debian-derived systems, you can set this up with:
  apt-get install libcrypt-openssl-rsa-perl" ; exit 1; }

perl -MDigest::SHA -e 1 2>/dev/null || { echo "You must have the perl module Digest::SHA installed to run this test.  
On debian-derived systems, you can set this up with:
  apt-get install libdigest-sha1-perl" ; exit 1; }


######################################################################
### SETUP VARIABLES

## set up some variables to ensure that we're operating strictly in
## the tests, not system-wide:

mkdir -p "$TESTDIR"/tmp
TEMPDIR=$(mktemp -d "${TMPDIR:-$TESTDIR/tmp}/monkeyspheretest.XXXXXXX")

mkdir "$TEMPDIR"/bin
ln -s "$TESTDIR"/../src/share/keytrans "$TEMPDIR"/bin/openpgp2ssh
ln -s "$TESTDIR"/../src/share/keytrans "$TEMPDIR"/bin/pem2openpgp

# Use the local copy of executables first, instead of system ones.
# This should help us test without installing.
export PATH="$TEMPDIR"/bin:"$PATH"

## setup trap
trap failed_cleanup EXIT

######################################################################
### TEST KEYTRANS

echo "##################################################"
echo "### generating openpgp key..."
export GNUPGHOME="$TEMPDIR"
chmod 700 "$TEMPDIR"


# create the key with the same preferences that monkeysphere uses.
cat > "$TEMPDIR"/gpg.conf <<EOF
default-preference-list SHA512 SHA384 SHA256 SHA224 RIPEMD160 SHA1 ZLIB BZIP2 ZIP AES256 AES192 AES CAST5 3DES
cert-digest-algo SHA256
EOF

# generate a key
gpg --batch --$(get_gpg_prng_arg) --gen-key <<EOF
Key-Type: RSA
Key-Length: 1024
Key-Usage: sign
Name-Real: testtest
Expire-Date: 0

%commit
%echo done
EOF

echo "##################################################"
echo "### retrieving key timestamp..."
timestamp=$(gpg --list-key --with-colons --fixed-list-mode | \
    grep ^pub: | cut -d: -f6)

echo "##################################################"
echo "### exporting key to ssh file..."
gpg --export-secret-key | openpgp2ssh > \
    "$TEMPDIR"/test.pem

gpg --export-secret-key > "$TEMPDIR"/secret.key

PEM2OPENPGP_USAGE_FLAGS=sign,certify \
PEM2OPENPGP_TIMESTAMP="$timestamp" pem2openpgp testtest \
 < "$TEMPDIR"/test.pem > "$TEMPDIR"/converted.secret.key

echo "##################################################"
echo "### reconvert key, and compare to key in gpg keyring..."
diff -u \
    <(gpg --list-packets < "$TEMPDIR"/secret.key) \
    <(gpg --list-packets < "$TEMPDIR"/converted.secret.key)

diff -u \
    <(hd "$TEMPDIR"/secret.key) \
    <(hd "$TEMPDIR"/converted.secret.key)

trap - EXIT

echo "##################################################"
echo " Monkeysphere keytrans test completed successfully!"
echo "##################################################"

cleanup
